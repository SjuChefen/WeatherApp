@startuml

package com.CPS.web {
    class WebSocket {
        +void configureMessageBroker(MessageBrokerRegistry config)
        +void registerStompEndpoints(StompEndpointRegistry registry)
    }

    class WeatherDataController {
        -IService service
        +ResponseEntity<?> getWeatherData(String city)
        +String getWeatherPage(String city, Model model)
    }

    class DTO {
        +String city
        +Long time
        +Double temperature
        +Integer humidity
        +Double windSpeed
        +Integer windDirection
        +String location
        +String icon
    }

    class WeatherUpdateEvent {
        -DTO weatherData
        +WeatherUpdateEvent(Object source, DTO weatherData)
        +DTO getWeatherData()
    }

    class WeatherUpdateListener {
        -SimpMessagingTemplate template
        +void handleWeatherUpdate(WeatherUpdateEvent event)
    }

    class CityNotFoundException {
        +CityNotFoundException(String message)
    }

    class Weather {
        +Long id
        +String city
        +Long time
        +Double temperature
        +Integer humidity
        +Double windSpeed
        +Integer windDirection
        +String location
        +String icon
    }

    class WeatherRepository {
        +List<Weather> findByCity(String city)
        +Optional<Weather> findByCityAndTime(String city, Long time)
    }

    class Scheduling {
        -ServiceImpl weatherService
        -SimpMessagingTemplate template
        +void fetchWeatherData()
    }

    class ServiceImpl {
        -WeatherRepository weatherRepository
        -String apiKey
        -String apiURL
        -AtomicReference<String> currentCity
        -ApplicationEventPublisher eventPublisher
        +void fetchAndSaveCityWeather(String cityName)
        +List<DTO> getWeather(String cityName)
        +String getCurrentCity()
    }

    interface IService {
        +void fetchAndSaveCityWeather(String city)
        +List<DTO> getWeather(String city)
    }

    interface JpaRepository {
    }

    IService <|.. ServiceImpl
    WeatherRepository <|.. JpaRepository
    WeatherUpdateEvent --> DTO
    WeatherUpdateListener --> WeatherUpdateEvent
    ServiceImpl --> WeatherRepository
    ServiceImpl --> ApplicationEventPublisher
    Scheduling --> ServiceImpl
    Scheduling --> SimpMessagingTemplate
    WeatherUpdateListener --> SimpMessagingTemplate
    WeatherDataController --> IService : depends on
    WeatherRepository --> Weather
}

@enduml
